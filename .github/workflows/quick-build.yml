name: Quick Build (Current Platform)

on:
  workflow_dispatch:
    inputs:
      platform:
        description: "Platform to build for"
        required: true
        default: "current"
        type: choice
        options:
          - current
          # - macos-intel
          # - macos-m1
          - linux
          - windows
jobs:
  quick-build:
    runs-on: >-
      ${{
        inputs.platform == 'windows' && 'windows-latest' ||
        inputs.platform == 'linux' && 'ubuntu-22.04' ||
        (inputs.platform == 'macos-intel' || inputs.platform == 'macos-m1') && 'macos-latest' ||
        'macos-latest'
      }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install Node.js dependencies
        run: pnpm install

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: >-
            ${{
              inputs.platform == 'macos-intel' && 'x86_64-apple-darwin' ||
              inputs.platform == 'macos-m1' && 'aarch64-apple-darwin' ||
              inputs.platform == 'linux' && 'x86_64-unknown-linux-gnu' ||
              inputs.platform == 'windows' && 'x86_64-pc-windows-msvc' ||
              ''
            }}

      - name: Install Linux dependencies
        if: inputs.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libwebkit2gtk-4.1-dev \
            build-essential \
            curl \
            wget \
            file \
            libxdo-dev \
            libssl-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libgtk-3-dev \
            libjavascriptcoregtk-4.1-dev \
            libsoup-3.0-dev \
            patchelf

      - name: Build frontend
        run: pnpm build

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >-
            ${{
              inputs.platform == 'macos-intel' && '--target x86_64-apple-darwin' ||
              inputs.platform == 'macos-m1' && '--target aarch64-apple-darwin' ||
              inputs.platform == 'linux' && '--target x86_64-unknown-linux-gnu' ||
              inputs.platform == 'windows' && '--target x86_64-pc-windows-msvc' ||
              ''
            }}

      - name: Determine target
        id: target
        shell: bash
        run: |
          if [ "${{ inputs.platform }}" = "macos-intel" ]; then
            echo "target=x86_64-apple-darwin" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.platform }}" = "macos-m1" ]; then
            echo "target=aarch64-apple-darwin" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.platform }}" = "linux" ]; then
            echo "target=x86_64-unknown-linux-gnu" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.platform }}" = "windows" ]; then
            echo "target=x86_64-pc-windows-msvc" >> $GITHUB_OUTPUT
          else
            echo "target=" >> $GITHUB_OUTPUT
          fi

      - name: Prepare artifacts (macOS)
        if: inputs.platform == 'macos-intel' || inputs.platform == 'macos-m1'
        run: |
          mkdir -p artifacts
          find src-tauri/target/${{ steps.target.outputs.target }}/release/bundle -name "*.dmg" -exec cp {} artifacts/ \;

      - name: Prepare artifacts (Windows)
        if: inputs.platform == 'windows'
        run: |
          mkdir artifacts
          $exeFiles = Get-ChildItem -Path "src-tauri/target/${{ steps.target.outputs.target }}/release/bundle" -Recurse -Include "*.exe"
          if ($exeFiles) {
            $exeFiles | Copy-Item -Destination "artifacts/"
          } else {
            Get-ChildItem -Path "src-tauri/target/${{ steps.target.outputs.target }}/release/bundle" -Recurse -Include "*.msi" | Copy-Item -Destination "artifacts/"
          }

      - name: Prepare artifacts (Linux)
        if: inputs.platform == 'linux'
        run: |
          mkdir -p artifacts
          find src-tauri/target/${{ steps.target.outputs.target }}/release/bundle -name "*.deb" -exec cp {} artifacts/ \;
          find src-tauri/target/${{ steps.target.outputs.target }}/release/bundle -name "*.AppImage" -exec cp {} artifacts/ \;

      - name: Prepare artifacts (current platform)
        if: inputs.platform == 'current'
        shell: bash
        run: |
          mkdir -p artifacts
          # 自动检测并复制构建产物
          if [ -d "src-tauri/target/release/bundle" ]; then
            cp -r src-tauri/target/release/bundle/* artifacts/ || true
          fi
          if [ -d "src-tauri/target/x86_64-unknown-linux-gnu/release/bundle" ]; then
            find src-tauri/target/x86_64-unknown-linux-gnu/release/bundle -name "*.deb" -exec cp {} artifacts/ \;
            find src-tauri/target/x86_64-unknown-linux-gnu/release/bundle -name "*.AppImage" -exec cp {} artifacts/ \;
          fi
          if [ -d "src-tauri/target/x86_64-pc-windows-msvc/release/bundle" ]; then
            find src-tauri/target/x86_64-pc-windows-msvc/release/bundle -name "*.exe" -exec cp {} artifacts/ \; || true
            find src-tauri/target/x86_64-pc-windows-msvc/release/bundle -name "*.msi" -exec cp {} artifacts/ \; || true
          fi
          if [ -d "src-tauri/target/x86_64-apple-darwin/release/bundle" ]; then
            find src-tauri/target/x86_64-apple-darwin/release/bundle -name "*.dmg" -exec cp {} artifacts/ \;
          fi
          if [ -d "src-tauri/target/aarch64-apple-darwin/release/bundle" ]; then
            find src-tauri/target/aarch64-apple-darwin/release/bundle -name "*.dmg" -exec cp {} artifacts/ \;
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: auto-cursor-quick-build-${{ inputs.platform }}
          path: artifacts/*
          if-no-files-found: warn
          compression-level: 0
